@article{Blischak2016,
abstract = {Many scientists write code as part of their research. Just as expriments are logged in laboratory notebooks, it is important to document the code you use for analysis. However, a few key problems can arise when iteratively developing code that make it difficult to document and track which code version was used to create each result. First, you often need to experiment with new ideas, such as adding new features to a script or increasing the speed of a slow step, but you do not want to risk breaking the currently working code. One often-utilized solution is to make a copy of the script before making new edits. However, this can quickly become a problem because it clutters your file system with uninformative filenames, e.g., analisys.sh, analysis{\_}02.sh, analysis{\_}03.sh, etc. It is difficult to remember the differences between the verions of the files and, more importantly, which version you used to produce specific results, especially if you return to the code months later. Second, you will likely share your code with multiple lab mates or collaborators, and they may have suggestions on how to improve it. If you email the code to multiple people, you will have to manually incorporate all the changes of them sends. Fortunately, software engineers have already developed software to manage these issues: version control. A version control system (VCS) allows you to track the iterative changes you make to your code, Thus, you can experiment with new ideas but always have the option to revert to a specific past version of the code you used to generate particular results. Furthermore, you can record messages as you save each successive version so that you (or anyone else) reviewing the development history of the code is able to understand the rationale for the given edits. It also facilitates collaboration. Using a VCS, your collaborators can make and save changes to the code, and you can automatically incorporate these changes to the main code base. The collaborative aspect is enhanced with the emergence of websites that host version-controlled code.},
author = {Blischak, John D. and Davenport, Emily R. and Wilson, Greg},
doi = {10.1371/journal.pcbi.1004668},
file = {:home/max/Documents/library/A{\_}Quick{\_}Introduction{\_}to{\_}Version{\_}Control{\_}with{\_}Git{\_}a.pdf:pdf},
journal = {PLOS Computational Biology},
number = {1},
pages = {e1004668},
title = {{A Quick Introduction to Version Control with Git and GitHub}},
volume = {12},
year = {2016}
}
